void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Artur-Sg/learn-jenkins"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}
pipeline {
  agent any
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'DEVELOPER', value: '$.pull_request.user.login'],
        [key: 'PR_NAME', value: '$.pull_request.user.title'],
        [key: 'PR_BRANCH', value: '$.pull_request.head.ref'],
        [key: 'IS_PR_MERGED', value: '$.pull_request.merged'],
        [key: 'PR_MERGED_BASE', value: '$.pull_request.base.ref'],
      ],
    
    causeString: '$DEVELOPER has updated PR $PR_NAME',

    token: 'LINEATE',

    printContributedVariables: false,
    printPostContent: false,

    silentResponse: false,
    )
  }
  stages {
    stage('Echo parameters') {
      steps {
        sh 'echo $DEVELOPER'
        sh 'echo "Is merged: $IS_PR_MERGED"'
        sh 'echo "Merge base $PR_MERGED_BASE?"'
      }
    }
  }
  post {
    success {
      build job: 'Check-PR', parameters: [[$class: 'StringParameterValue', name: 'PR_BRANCH', value: PR_BRANCH]]
      sh 'echo isMerger: IS_PR_MERGED!'
      setBuildStatus("Build succeeded", "SUCCESS");
      script {
        if (PR_MERGED_BASE == 'master' && IS_PR_MERGED == 'true') {
          build job: 'Check-Build-Front', parameters: [[$class: 'StringParameterValue', name: 'BUILD_BRANCH', value: "master"]]
        } 
      }
    }
    failure {
      setBuildStatus("Build failed", "FAILURE");
    }
  }
}